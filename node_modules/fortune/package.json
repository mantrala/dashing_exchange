{
  "name": "fortune",
  "description": "Web framework for prototyping hypermedia APIs.",
  "version": "0.1.17",
  "license": "MIT",
  "author": {
    "name": "Dali Zheng",
    "email": "dali@series.ac"
  },
  "homepage": "http://fortunejs.com",
  "repository": {
    "type": "git",
    "url": "https://github.com/daliwali/fortune"
  },
  "main": "lib/fortune",
  "scripts": {
    "test": "node test/run"
  },
  "dependencies": {
    "mkdirp": "~0.3.5",
    "express": "~3.4.3",
    "nedb": "~0.8.11",
    "rsvp": "~2.0.4",
    "i": "~0.3.2",
    "lodash": "~2.2.1"
  },
  "devDependencies": {
    "fortune-mongodb": "~0.1.7",
    "mocha": "~1.13.0",
    "should": "~2.0.2",
    "supertest": "~0.8.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "keywords": [
    "json",
    "api",
    "framework",
    "rest",
    "restful"
  ],
  "readme": "# Fortune.js [![Build Status](https://travis-ci.org/daliwali/fortune.png?branch=master)](https://travis-ci.org/daliwali/fortune)\n\nHello nerds. Fortune is a web framework for prototyping hypermedia APIs that implement the [JSON API](http://jsonapi.org/) specification. It comes with a modular persistence layer, with adapters for [NeDB](//github.com/louischatriot/nedb) (built-in), [MongoDB](//github.com/daliwali/fortune-mongodb), [MySQL](//github.com/daliwali/fortune-relational), [Postgres](//github.com/daliwali/fortune-relational), & [SQLite](//github.com/daliwali/fortune-relational).\n\nGet it by installing from npm:\n```\n$ npm install fortune\n```\n\n### Features\n\nFortune implements everything you need to get started with JSON API, with a few extra features:\n\n- Focus on ease of use. Fortune gives you routing and database interactions for free, so you don't have to do the plumbing.\n- Associations and bi-directional relationship mapping. Fortune manages associations between resources so you don't have to.\n- Hooks to transform resources before writing and after reading, for implementing application-specific logic (and magic).\n\nIt does not come with any authentication or authorization, you should implement your own application-specific logic (see [keystore.js](//github.com/daliwali/fortune/blob/master/examples/keystore.js) for an example).\n\n## Guide & Documentation\n\nThe full guide and API documentation are located at [fortunejs.com](http://fortunejs.com/).\n\n### Basic Usage\n\nHere is a minimal application:\n\n```javascript\nrequire('fortune')()\n\n.resource('person', {\n  name: String,\n  age: Number,\n  pets: ['pet'] // \"has many\" relationship to pets\n\n}).resource('pet', {\n  name: String,\n  age: Number,\n  owner: 'person' // \"belongs to\" relationship to a person\n\n}).listen(1337);\n```\n\nThis exposes a few routes for the `person` and `pet` resources, as defined by the JSON API specification:\n\n| HTTP   | Person             | Pet               | Notes                                                        |\n|--------|--------------------|-------------------|--------------------------------------------------------------|\n| GET    | /people            | /pets             | Get a collection of resources, accepts query `?ids=1,2,3...` |\n| POST   | /people            | /pets             | Create a resource                                            |\n| GET    | /people/`:id`      | /pets/`:id`       | Get a specific resource, or multiple: `1,2,3`                |\n| PUT    | /people/`:id`      | /pets/`:id`       | Create or update a resource                                  |\n| PATCH  | /people/`:id`      | /pets/`:id`       | Patch a resource (see [RFC 6902](//tools.ietf.org/html/rfc6902)) |\n| DELETE | /people/`:id`      | /pets/`:id`       | Delete a resource                                            |\n| GET    | /people/`:id`/pets | /pets/`:id`/owner | Get a related resource (one level deep)                      |\n\n### Unit Testing\n\nTests are written with Mocha, and are run against the built-in NeDB adapter, plus MongoDB & MySQL on Travis. You will also need to have the developer dependencies installed. To run tests:\n\n```\n$ npm test\n```\n\n### Client-side Implementations\n- [Ember Data](//github.com/emberjs/data): the original implementation, it needs a [custom adapter](//github.com/daliwali/ember-json-api) to actually work.\n\n### Meta\n\nFor release history and roadmap, see [CHANGELOG.md](//github.com/daliwali/fortune/blob/master/CHANGELOG.md).\n\nFortune is licensed under the MIT license, see [LICENSE.md](//github.com/daliwali/fortune/blob/master/LICENSE.md).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/daliwali/fortune/issues"
  },
  "_id": "fortune@0.1.17",
  "dist": {
    "shasum": "1d0ee19ca2cdf591d891f75ccf3833e653fd631e"
  },
  "_from": "fortune@",
  "_resolved": "https://registry.npmjs.org/fortune/-/fortune-0.1.17.tgz"
}
